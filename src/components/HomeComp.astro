---
import Image from 'astro/components/Image.astro';
import { t } from "astro-i18n";

interface Props {
    Title: string;
    num: string;
    year: string;
    Category: string;
    images?: ImageMetadata[]; 
    video?: string[]; 
    description: string;
    link: string;
    linkText: string;
    collaborators?: { name: string; link: string }[];
}

const { Title, num, year, Category, images = [], video = [], description, link, linkText, collaborators = [] } = Astro.props;

type MediaType = 'video' | 'image';
type MediaItem = { type: MediaType; src: string }; 


const combinedMedia: MediaItem[] = [
    ...video.map((v) => ({ type: 'video' as const, src: v })),
    ...images.map((i) => ({ type: 'image' as const, src: i.src })),
];


function shuffleArray(array: MediaItem[]): MediaItem[] {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

const shuffledMedia = shuffleArray(combinedMedia);
---

<div x-data="{ openGallery: false }" class="group no-scrollbar">
    <div class="grid grid-cols-2 sm:grid-cols-12 info leading-tight max-sm:py-2">
        <p class="col-span-1 ">[{num}]</p>
        <p class="col-span-1 sm:col-span-8 cursor-pointer uppercase link" @click.prevent="openGallery = !openGallery">{Title}</p>
        <div class="col-span-1 sm:hidden"></div>
        <p class="col-span-1 sm:col-span-2">{Category}</p>
        <div class="col-span-1 sm:hidden"></div>
        <p class="col-span-1 sm:justify-self-end">{year}</p>
    </div>

    <div x-show="openGallery" x-cloak 
        x-transition:enter="transition ease-out duration-500"
        x-transition:enter-start="transform translate-x-full opacity-0"
        x-transition:enter-end="transform translate-x-0 opacity-100"
        x-transition:leave="transition ease-in duration-500"
        x-transition:leave-start="transform translate-x-0 opacity-100"
        x-transition:leave-end="transform -translate-x-full opacity-0"
        class="flex overflow-x-auto gap-2 no-scrollbar">
        
        {shuffledMedia.map((media, index) => (
            media.type === 'video' ? (
                <video 
                    src={media.src} 
                    muted 
                    autoplay 
                    loop 
                    playsinline 
                    class="aspect-video object-cover max-sm:w-[95%] sm:h-[250px] lg:h-[300px] xl:h-[350px]" 
                ></video>
            ) : (
                <Image 
                    src={media.src} 
                    alt={`Image ${index + 1}`} 
                    width={1080} 
                    height={1080} 
                    format="webp"
                    loading="eager"
                    class="aspect-video object-cover max-sm:w-[95%] sm:h-[250px] lg:h-[300px] xl:h-[350px]" 
                />
            )
        ))}


        
        <div class="w-full sm:w-[calc(100%*(11/12))] flex flex-shrink-0 whitespace-nowrap">
            <div class="whitespace-normal break-words max-w-[45%] sm:max-w-[50%]">
                <p>{description}</p>
                <br>
                {link && (
                    <a href={link} target="_blank" class="hover:opacity-40 transition-opacity whitespace-nowrap">
                        {linkText}
                    </a>
                )}
            </div>
            <div class="sticky left-1/2 sm:left-[calc(100%*(9/12))] max-w-[45%] sm:max-w-[calc(100%*(2/12))] top-0">
                {collaborators?.length > 0 && (
                    <>
                        <p>{t("index.collab")}:</p>
                        {collaborators.map((collab) => (
                            collab.link ? (
                                <a href={collab.link} target="_blank" class="block hover:opacity-40 transition-opacity">
                                    {collab.name}
                                </a>
                            ) : (
                                <p>{collab.name}</p>
                            )
                        ))}
                    </>
                )}
            </div>
        </div>   
    </div>
</div>



<script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
        const isSmallScreen = window.matchMedia("(min-width: 640px)");

        if (isSmallScreen.matches) {
            const components = document.querySelectorAll('.group');

            components.forEach(component => {
                const linkElement = component.querySelector('.link');
                const infoElement = component.querySelector('.info');
                const imgElement = component.querySelector('.img');

                infoElement.classList.add('transition-opacity');

                linkElement.addEventListener('mouseenter', () => {
                    infoElement.classList.add('opacity-40');
                    imgElement?.classList.remove('hidden');
                    imgElement?.classList.add('block');
                });

                linkElement.addEventListener('mouseleave', () => {
                    infoElement.classList.remove('opacity-40');
                    imgElement?.classList.remove('block');
                    imgElement?.classList.add('hidden');
                });
            });
        }
    });
</script>

