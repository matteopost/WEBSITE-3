---
import Image from 'astro/components/Image.astro';
import { astroI18n, t } from "astro-i18n";

interface Props {
    Title: string;
    num: string;
    year: string;
    Category: string;
    images?: ImageMetadata[]; 
    description: string;
    link: string;
    linkText: string;
    collaborators?: { name: string; link: string }[];

}

const { Title, num, year, Category, images = [], description, link, linkText, collaborators = [] } = Astro.props;
---

<div x-data="{ openGallery: false }" class="group no-scrollbar">
    <div class="grid grid-cols-2 sm:grid-cols-12 info leading-tight max-sm:py-2">
        <p class="col-span-1 ">[{num}]</p>
        <p class="col-span-1 sm:col-span-8 cursor-pointer uppercase link" @click.prevent="openGallery = !openGallery">{Title}</p>
        <div class="col-span-1 sm:hidden"></div>
        <p class="col-span-1 sm:col-span-2">{Category}</p>
        <div class="col-span-1 sm:hidden"></div>
        <p class="col-span-1 sm:justify-self-end">{year}</p>
    </div>

    <div x-show="openGallery" x-cloak 
        x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="flex overflow-x-auto gap-2 no-scrollbar">
        
        {images?.map((img, index) => (
            <Image 
                src={img} 
                alt={`Image ${index + 1}`} 
                width={1080} 
                height={1080} 
                format="webp"
                class="aspect-video object-cover max-sm:w-[95%] sm:h-[250px] lg:h-[300px] xl:h-[350px]" 
            />
        ))}
        
        
        <div class="w-full sm:w-[calc(100%*(11/12))] flex flex-shrink-0 whitespace-nowrap">
            <div class="whitespace-normal break-words max-w-[45%] sm:max-w-[50%]">
                <p>{description}</p>
                <br>
                {link && (
                    <a href={link} target="_blank" class="hover:opacity-40 transition-opacity whitespace-nowrap">
                        {linkText}
                    </a>
                )}
            </div>
            <div class="sticky left-1/2 sm:left-[calc(100%*(9/12))] max-w-[45%] sm:max-w-[calc(100%*(2/12))] top-0">
                {collaborators?.length > 0 && (
                    <>
                        <p>{t("index.collab")}:</p>
                        {collaborators.map((collab) => (
                            <a href={collab.link} target="_blank" class="block hover:opacity-40 transition-opacity">
                                {collab.name}
                            </a>
                        ))}
                    </>
                )}
            </div>
        </div>   
        
        
    </div>
</div>



<script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
        const components = document.querySelectorAll('.group');

        components.forEach(component => {
            const linkElement = component.querySelector('.link');
            const infoElement = component.querySelector('.info');
            const imgElement = component.querySelector('.img');

            linkElement.addEventListener('mouseenter', () => {
                infoElement.classList.add('opacity-40');
                imgElement?.classList.remove('hidden');
                imgElement?.classList.add('block');
            });

            linkElement.addEventListener('mouseleave', () => {
                infoElement.classList.remove('opacity-40');
                imgElement?.classList.remove('block');
                imgElement?.classList.add('hidden');
            });
        });
    });
</script>
